// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `Player.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package MP3Player;

/**
 * Provides type-specific helper functions.
 **/
public final class PlayerPrxHelper extends Ice.ObjectPrxHelperBase implements PlayerPrx
{
    private static final String __addFile_name = "addFile";

    public void addFile(byte[] f, String name)
    {
        addFile(f, name, null, false);
    }

    public void addFile(byte[] f, String name, java.util.Map<String, String> __ctx)
    {
        addFile(f, name, __ctx, true);
    }

    private void addFile(byte[] f, String name, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_addFile(begin_addFile(f, name, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_addFile(byte[] f, String name)
    {
        return begin_addFile(f, name, null, false, false, null);
    }

    public Ice.AsyncResult begin_addFile(byte[] f, String name, java.util.Map<String, String> __ctx)
    {
        return begin_addFile(f, name, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_addFile(byte[] f, String name, Ice.Callback __cb)
    {
        return begin_addFile(f, name, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_addFile(byte[] f, String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addFile(f, name, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_addFile(byte[] f, String name, Callback_Player_addFile __cb)
    {
        return begin_addFile(f, name, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_addFile(byte[] f, String name, java.util.Map<String, String> __ctx, Callback_Player_addFile __cb)
    {
        return begin_addFile(f, name, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_addFile(byte[] f, 
                                         String name, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_addFile(f, name, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_addFile(byte[] f, 
                                         String name, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_addFile(f, name, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_addFile(byte[] f, 
                                         String name, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_addFile(f, name, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_addFile(byte[] f, 
                                         String name, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_addFile(f, name, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_addFile(byte[] f, 
                                          String name, 
                                          java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_addFile(f, 
                             name, 
                             __ctx, 
                             __explicitCtx, 
                             __synchronous, 
                             new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_addFile(byte[] f, 
                                          String name, 
                                          java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__addFile_name, __cb);
        try
        {
            __result.prepare(__addFile_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            FileHelper.write(__os, f);
            __os.writeString(name);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_addFile(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __addFile_name);
    }

    private static final String __deleteDirectory_name = "deleteDirectory";

    public void deleteDirectory(String name)
    {
        deleteDirectory(name, null, false);
    }

    public void deleteDirectory(String name, java.util.Map<String, String> __ctx)
    {
        deleteDirectory(name, __ctx, true);
    }

    private void deleteDirectory(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_deleteDirectory(begin_deleteDirectory(name, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_deleteDirectory(String name)
    {
        return begin_deleteDirectory(name, null, false, false, null);
    }

    public Ice.AsyncResult begin_deleteDirectory(String name, java.util.Map<String, String> __ctx)
    {
        return begin_deleteDirectory(name, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_deleteDirectory(String name, Ice.Callback __cb)
    {
        return begin_deleteDirectory(name, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_deleteDirectory(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_deleteDirectory(name, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_deleteDirectory(String name, Callback_Player_deleteDirectory __cb)
    {
        return begin_deleteDirectory(name, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_deleteDirectory(String name, java.util.Map<String, String> __ctx, Callback_Player_deleteDirectory __cb)
    {
        return begin_deleteDirectory(name, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_deleteDirectory(String name, 
                                                 IceInternal.Functional_VoidCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_deleteDirectory(name, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_deleteDirectory(String name, 
                                                 IceInternal.Functional_VoidCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_deleteDirectory(name, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_deleteDirectory(String name, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_VoidCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_deleteDirectory(name, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_deleteDirectory(String name, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_VoidCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_deleteDirectory(name, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_deleteDirectory(String name, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.Functional_VoidCallback __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_deleteDirectory(name, 
                                     __ctx, 
                                     __explicitCtx, 
                                     __synchronous, 
                                     new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_deleteDirectory(String name, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__deleteDirectory_name, __cb);
        try
        {
            __result.prepare(__deleteDirectory_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(name);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_deleteDirectory(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __deleteDirectory_name);
    }

    private static final String __deleteFile_name = "deleteFile";

    public void deleteFile(String name)
    {
        deleteFile(name, null, false);
    }

    public void deleteFile(String name, java.util.Map<String, String> __ctx)
    {
        deleteFile(name, __ctx, true);
    }

    private void deleteFile(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_deleteFile(begin_deleteFile(name, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_deleteFile(String name)
    {
        return begin_deleteFile(name, null, false, false, null);
    }

    public Ice.AsyncResult begin_deleteFile(String name, java.util.Map<String, String> __ctx)
    {
        return begin_deleteFile(name, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_deleteFile(String name, Ice.Callback __cb)
    {
        return begin_deleteFile(name, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_deleteFile(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_deleteFile(name, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_deleteFile(String name, Callback_Player_deleteFile __cb)
    {
        return begin_deleteFile(name, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_deleteFile(String name, java.util.Map<String, String> __ctx, Callback_Player_deleteFile __cb)
    {
        return begin_deleteFile(name, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_deleteFile(String name, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_deleteFile(name, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_deleteFile(String name, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_deleteFile(name, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_deleteFile(String name, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_deleteFile(name, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_deleteFile(String name, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_deleteFile(name, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_deleteFile(String name, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_deleteFile(name, 
                                __ctx, 
                                __explicitCtx, 
                                __synchronous, 
                                new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_deleteFile(String name, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__deleteFile_name, __cb);
        try
        {
            __result.prepare(__deleteFile_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(name);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_deleteFile(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __deleteFile_name);
    }

    private static final String __getFile_name = "getFile";

    public byte[] getFile(String name)
    {
        return getFile(name, null, false);
    }

    public byte[] getFile(String name, java.util.Map<String, String> __ctx)
    {
        return getFile(name, __ctx, true);
    }

    private byte[] getFile(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getFile_name);
        return end_getFile(begin_getFile(name, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getFile(String name)
    {
        return begin_getFile(name, null, false, false, null);
    }

    public Ice.AsyncResult begin_getFile(String name, java.util.Map<String, String> __ctx)
    {
        return begin_getFile(name, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getFile(String name, Ice.Callback __cb)
    {
        return begin_getFile(name, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getFile(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFile(name, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getFile(String name, Callback_Player_getFile __cb)
    {
        return begin_getFile(name, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getFile(String name, java.util.Map<String, String> __ctx, Callback_Player_getFile __cb)
    {
        return begin_getFile(name, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getFile(String name, 
                                         IceInternal.Functional_GenericCallback1<byte[]> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getFile(name, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getFile(String name, 
                                         IceInternal.Functional_GenericCallback1<byte[]> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getFile(name, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getFile(String name, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_GenericCallback1<byte[]> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getFile(name, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getFile(String name, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_GenericCallback1<byte[]> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getFile(name, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getFile(String name, 
                                          java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.Functional_GenericCallback1<byte[]> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getFile(name, __ctx, __explicitCtx, __synchronous, 
                             new IceInternal.Functional_TwowayCallbackArg1<byte[]>(__responseCb, __exceptionCb, __sentCb)
                                 {
                                     public final void __completed(Ice.AsyncResult __result)
                                     {
                                         PlayerPrxHelper.__getFile_completed(this, __result);
                                     }
                                 });
    }

    private Ice.AsyncResult begin_getFile(String name, 
                                          java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFile_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getFile_name, __cb);
        try
        {
            __result.prepare(__getFile_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(name);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public byte[] end_getFile(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getFile_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            byte[] __ret;
            __ret = FileHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getFile_completed(Ice.TwowayCallbackArg1<byte[]> __cb, Ice.AsyncResult __result)
    {
        MP3Player.PlayerPrx __proxy = (MP3Player.PlayerPrx)__result.getProxy();
        byte[] __ret = null;
        try
        {
            __ret = __proxy.end_getFile(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getFileLength_name = "getFileLength";

    public int getFileLength(String name)
    {
        return getFileLength(name, null, false);
    }

    public int getFileLength(String name, java.util.Map<String, String> __ctx)
    {
        return getFileLength(name, __ctx, true);
    }

    private int getFileLength(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getFileLength_name);
        return end_getFileLength(begin_getFileLength(name, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getFileLength(String name)
    {
        return begin_getFileLength(name, null, false, false, null);
    }

    public Ice.AsyncResult begin_getFileLength(String name, java.util.Map<String, String> __ctx)
    {
        return begin_getFileLength(name, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getFileLength(String name, Ice.Callback __cb)
    {
        return begin_getFileLength(name, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getFileLength(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFileLength(name, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getFileLength(String name, Callback_Player_getFileLength __cb)
    {
        return begin_getFileLength(name, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getFileLength(String name, java.util.Map<String, String> __ctx, Callback_Player_getFileLength __cb)
    {
        return begin_getFileLength(name, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getFileLength(String name, 
                                               IceInternal.Functional_IntCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getFileLength(name, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getFileLength(String name, 
                                               IceInternal.Functional_IntCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getFileLength(name, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getFileLength(String name, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_IntCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getFileLength(name, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getFileLength(String name, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_IntCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getFileLength(name, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getFileLength(String name, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.Functional_IntCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getFileLength(name, __ctx, __explicitCtx, __synchronous, 
                                   new IceInternal.Functional_TwowayCallbackInt(__responseCb, __exceptionCb, __sentCb)
                                       {
                                           public final void __completed(Ice.AsyncResult __result)
                                           {
                                               PlayerPrxHelper.__getFileLength_completed(this, __result);
                                           }
                                       });
    }

    private Ice.AsyncResult begin_getFileLength(String name, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFileLength_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getFileLength_name, __cb);
        try
        {
            __result.prepare(__getFileLength_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(name);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public int end_getFileLength(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getFileLength_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getFileLength_completed(Ice.TwowayCallbackInt __cb, Ice.AsyncResult __result)
    {
        MP3Player.PlayerPrx __proxy = (MP3Player.PlayerPrx)__result.getProxy();
        int __ret = 0;
        try
        {
            __ret = __proxy.end_getFileLength(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getFilesByRegex_name = "getFilesByRegex";

    public String getFilesByRegex(String name)
    {
        return getFilesByRegex(name, null, false);
    }

    public String getFilesByRegex(String name, java.util.Map<String, String> __ctx)
    {
        return getFilesByRegex(name, __ctx, true);
    }

    private String getFilesByRegex(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getFilesByRegex_name);
        return end_getFilesByRegex(begin_getFilesByRegex(name, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getFilesByRegex(String name)
    {
        return begin_getFilesByRegex(name, null, false, false, null);
    }

    public Ice.AsyncResult begin_getFilesByRegex(String name, java.util.Map<String, String> __ctx)
    {
        return begin_getFilesByRegex(name, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getFilesByRegex(String name, Ice.Callback __cb)
    {
        return begin_getFilesByRegex(name, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getFilesByRegex(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFilesByRegex(name, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getFilesByRegex(String name, Callback_Player_getFilesByRegex __cb)
    {
        return begin_getFilesByRegex(name, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getFilesByRegex(String name, java.util.Map<String, String> __ctx, Callback_Player_getFilesByRegex __cb)
    {
        return begin_getFilesByRegex(name, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getFilesByRegex(String name, 
                                                 IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getFilesByRegex(name, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getFilesByRegex(String name, 
                                                 IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getFilesByRegex(name, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getFilesByRegex(String name, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getFilesByRegex(name, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getFilesByRegex(String name, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getFilesByRegex(name, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getFilesByRegex(String name, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getFilesByRegex(name, __ctx, __explicitCtx, __synchronous, 
                                     new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                         {
                                             public final void __completed(Ice.AsyncResult __result)
                                             {
                                                 PlayerPrxHelper.__getFilesByRegex_completed(this, __result);
                                             }
                                         });
    }

    private Ice.AsyncResult begin_getFilesByRegex(String name, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFilesByRegex_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getFilesByRegex_name, __cb);
        try
        {
            __result.prepare(__getFilesByRegex_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(name);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_getFilesByRegex(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getFilesByRegex_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getFilesByRegex_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        MP3Player.PlayerPrx __proxy = (MP3Player.PlayerPrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_getFilesByRegex(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getInvocationCount_name = "getInvocationCount";

    public void getInvocationCount(String s)
    {
        getInvocationCount(s, null, false);
    }

    public void getInvocationCount(String s, java.util.Map<String, String> __ctx)
    {
        getInvocationCount(s, __ctx, true);
    }

    private void getInvocationCount(String s, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_getInvocationCount(begin_getInvocationCount(s, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getInvocationCount(String s)
    {
        return begin_getInvocationCount(s, null, false, false, null);
    }

    public Ice.AsyncResult begin_getInvocationCount(String s, java.util.Map<String, String> __ctx)
    {
        return begin_getInvocationCount(s, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getInvocationCount(String s, Ice.Callback __cb)
    {
        return begin_getInvocationCount(s, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getInvocationCount(String s, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getInvocationCount(s, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getInvocationCount(String s, Callback_Player_getInvocationCount __cb)
    {
        return begin_getInvocationCount(s, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getInvocationCount(String s, java.util.Map<String, String> __ctx, Callback_Player_getInvocationCount __cb)
    {
        return begin_getInvocationCount(s, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getInvocationCount(String s, 
                                                    IceInternal.Functional_VoidCallback __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getInvocationCount(s, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getInvocationCount(String s, 
                                                    IceInternal.Functional_VoidCallback __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getInvocationCount(s, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getInvocationCount(String s, 
                                                    java.util.Map<String, String> __ctx, 
                                                    IceInternal.Functional_VoidCallback __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getInvocationCount(s, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getInvocationCount(String s, 
                                                    java.util.Map<String, String> __ctx, 
                                                    IceInternal.Functional_VoidCallback __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getInvocationCount(s, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getInvocationCount(String s, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.Functional_VoidCallback __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getInvocationCount(s, 
                                        __ctx, 
                                        __explicitCtx, 
                                        __synchronous, 
                                        new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_getInvocationCount(String s, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getInvocationCount_name, __cb);
        try
        {
            __result.prepare(__getInvocationCount_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(s);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_getInvocationCount(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __getInvocationCount_name);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static PlayerPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), PlayerPrx.class, PlayerPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static PlayerPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), PlayerPrx.class, PlayerPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static PlayerPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), PlayerPrx.class, PlayerPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static PlayerPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), PlayerPrx.class, PlayerPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static PlayerPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, PlayerPrx.class, PlayerPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static PlayerPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, PlayerPrx.class, PlayerPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::MP3Player::Player"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, PlayerPrx v)
    {
        __os.writeProxy(v);
    }

    public static PlayerPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            PlayerPrxHelper result = new PlayerPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
