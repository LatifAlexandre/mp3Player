// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `Player.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Player.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __MP3Player__Player__getInvocationCount_name = "getInvocationCount";

const ::std::string __MP3Player__Player__addFile_name = "addFile";

const ::std::string __MP3Player__Player__deleteFile_name = "deleteFile";

const ::std::string __MP3Player__Player__deleteDirectory_name = "deleteDirectory";

const ::std::string __MP3Player__Player__getFileLength_name = "getFileLength";

const ::std::string __MP3Player__Player__getFilesByRegex_name = "getFilesByRegex";

const ::std::string __MP3Player__Player__getFile_name = "getFile";

}
::IceProxy::Ice::Object* ::IceProxy::MP3Player::upCast(::IceProxy::MP3Player::Player* p) { return p; }

void
::IceProxy::MP3Player::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::MP3Player::Player>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::MP3Player::Player;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::MP3Player::Player::getInvocationCount(const ::std::string& __p_s, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __MP3Player__Player__getInvocationCount_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_s);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::MP3Player::Player::begin_getInvocationCount(const ::std::string& __p_s, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __MP3Player__Player__getInvocationCount_name, __del, __cookie);
    try
    {
        __result->prepare(__MP3Player__Player__getInvocationCount_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_s);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::MP3Player::Player::end_getInvocationCount(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __MP3Player__Player__getInvocationCount_name);
}

void
IceProxy::MP3Player::Player::addFile(const ::MP3Player::File& __p_f, const ::std::string& __p_name, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __MP3Player__Player__addFile_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_f);
        __os->write(__p_name);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::MP3Player::Player::begin_addFile(const ::MP3Player::File& __p_f, const ::std::string& __p_name, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __MP3Player__Player__addFile_name, __del, __cookie);
    try
    {
        __result->prepare(__MP3Player__Player__addFile_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_f);
        __os->write(__p_name);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::MP3Player::Player::end_addFile(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __MP3Player__Player__addFile_name);
}

void
IceProxy::MP3Player::Player::deleteFile(const ::std::string& __p_name, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __MP3Player__Player__deleteFile_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::MP3Player::Player::begin_deleteFile(const ::std::string& __p_name, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __MP3Player__Player__deleteFile_name, __del, __cookie);
    try
    {
        __result->prepare(__MP3Player__Player__deleteFile_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::MP3Player::Player::end_deleteFile(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __MP3Player__Player__deleteFile_name);
}

void
IceProxy::MP3Player::Player::deleteDirectory(const ::std::string& __p_name, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __MP3Player__Player__deleteDirectory_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::MP3Player::Player::begin_deleteDirectory(const ::std::string& __p_name, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __MP3Player__Player__deleteDirectory_name, __del, __cookie);
    try
    {
        __result->prepare(__MP3Player__Player__deleteDirectory_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::MP3Player::Player::end_deleteDirectory(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __MP3Player__Player__deleteDirectory_name);
}

::Ice::Int
IceProxy::MP3Player::Player::getFileLength(const ::std::string& __p_name, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__MP3Player__Player__getFileLength_name);
    ::IceInternal::Outgoing __og(this, __MP3Player__Player__getFileLength_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::MP3Player::Player::begin_getFileLength(const ::std::string& __p_name, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__MP3Player__Player__getFileLength_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __MP3Player__Player__getFileLength_name, __del, __cookie);
    try
    {
        __result->prepare(__MP3Player__Player__getFileLength_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::MP3Player::Player::__begin_getFileLength(const ::std::string& __p_name, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::MP3Player::PlayerPrx __proxy = ::MP3Player::PlayerPrx::uncheckedCast(__result->getProxy());
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_getFileLength(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int)> _response;
    };
    return begin_getFileLength(__p_name, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::MP3Player::Player::end_getFileLength(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __MP3Player__Player__getFileLength_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::std::string
IceProxy::MP3Player::Player::getFilesByRegex(const ::std::string& __p_name, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__MP3Player__Player__getFilesByRegex_name);
    ::IceInternal::Outgoing __og(this, __MP3Player__Player__getFilesByRegex_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::std::string __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::MP3Player::Player::begin_getFilesByRegex(const ::std::string& __p_name, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__MP3Player__Player__getFilesByRegex_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __MP3Player__Player__getFilesByRegex_name, __del, __cookie);
    try
    {
        __result->prepare(__MP3Player__Player__getFilesByRegex_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::MP3Player::Player::__begin_getFilesByRegex(const ::std::string& __p_name, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::MP3Player::PlayerPrx __proxy = ::MP3Player::PlayerPrx::uncheckedCast(__result->getProxy());
            ::std::string __ret;
            try
            {
                __ret = __proxy->end_getFilesByRegex(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::std::string&)> _response;
    };
    return begin_getFilesByRegex(__p_name, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::std::string
IceProxy::MP3Player::Player::end_getFilesByRegex(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __MP3Player__Player__getFilesByRegex_name);
    ::std::string __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::MP3Player::File
IceProxy::MP3Player::Player::getFile(const ::std::string& __p_name, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__MP3Player__Player__getFile_name);
    ::IceInternal::Outgoing __og(this, __MP3Player__Player__getFile_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::MP3Player::File __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::MP3Player::Player::begin_getFile(const ::std::string& __p_name, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__MP3Player__Player__getFile_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __MP3Player__Player__getFile_name, __del, __cookie);
    try
    {
        __result->prepare(__MP3Player__Player__getFile_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::MP3Player::Player::__begin_getFile(const ::std::string& __p_name, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::MP3Player::File&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::MP3Player::File&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::MP3Player::PlayerPrx __proxy = ::MP3Player::PlayerPrx::uncheckedCast(__result->getProxy());
            ::MP3Player::File __ret;
            try
            {
                __ret = __proxy->end_getFile(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::MP3Player::File&)> _response;
    };
    return begin_getFile(__p_name, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::MP3Player::File
IceProxy::MP3Player::Player::end_getFile(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __MP3Player__Player__getFile_name);
    ::MP3Player::File __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::MP3Player::Player::ice_staticId()
{
    return ::MP3Player::Player::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::MP3Player::Player::__newInstance() const
{
    return new Player;
}

::Ice::Object* MP3Player::upCast(::MP3Player::Player* p) { return p; }

namespace
{
const ::std::string __MP3Player__Player_ids[2] =
{
    "::Ice::Object",
    "::MP3Player::Player"
};

}

bool
MP3Player::Player::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__MP3Player__Player_ids, __MP3Player__Player_ids + 2, _s);
}

::std::vector< ::std::string>
MP3Player::Player::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__MP3Player__Player_ids[0], &__MP3Player__Player_ids[2]);
}

const ::std::string&
MP3Player::Player::ice_id(const ::Ice::Current&) const
{
    return __MP3Player__Player_ids[1];
}

const ::std::string&
MP3Player::Player::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::MP3Player::Player";
    return typeId;
#else
    return __MP3Player__Player_ids[1];
#endif
}

::Ice::DispatchStatus
MP3Player::Player::___getInvocationCount(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_s;
    __is->read(__p_s);
    __inS.endReadParams();
    getInvocationCount(__p_s, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
MP3Player::Player::___addFile(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::MP3Player::File __p_f;
    ::std::string __p_name;
    __is->read(__p_f);
    __is->read(__p_name);
    __inS.endReadParams();
    addFile(__p_f, __p_name, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
MP3Player::Player::___deleteFile(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_name;
    __is->read(__p_name);
    __inS.endReadParams();
    deleteFile(__p_name, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
MP3Player::Player::___deleteDirectory(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_name;
    __is->read(__p_name);
    __inS.endReadParams();
    deleteDirectory(__p_name, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
MP3Player::Player::___getFileLength(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_name;
    __is->read(__p_name);
    __inS.endReadParams();
    ::Ice::Int __ret = getFileLength(__p_name, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
MP3Player::Player::___getFilesByRegex(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_name;
    __is->read(__p_name);
    __inS.endReadParams();
    ::std::string __ret = getFilesByRegex(__p_name, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
MP3Player::Player::___getFile(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_name;
    __is->read(__p_name);
    __inS.endReadParams();
    ::MP3Player::File __ret = getFile(__p_name, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __MP3Player__Player_all[] =
{
    "addFile",
    "deleteDirectory",
    "deleteFile",
    "getFile",
    "getFileLength",
    "getFilesByRegex",
    "getInvocationCount",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
MP3Player::Player::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__MP3Player__Player_all, __MP3Player__Player_all + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __MP3Player__Player_all)
    {
        case 0:
        {
            return ___addFile(in, current);
        }
        case 1:
        {
            return ___deleteDirectory(in, current);
        }
        case 2:
        {
            return ___deleteFile(in, current);
        }
        case 3:
        {
            return ___getFile(in, current);
        }
        case 4:
        {
            return ___getFileLength(in, current);
        }
        case 5:
        {
            return ___getFilesByRegex(in, current);
        }
        case 6:
        {
            return ___getInvocationCount(in, current);
        }
        case 7:
        {
            return ___ice_id(in, current);
        }
        case 8:
        {
            return ___ice_ids(in, current);
        }
        case 9:
        {
            return ___ice_isA(in, current);
        }
        case 10:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
MP3Player::Player::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
MP3Player::Player::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
MP3Player::__patch(PlayerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::MP3Player::PlayerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::MP3Player::Player::ice_staticId(), v);
    }
}
